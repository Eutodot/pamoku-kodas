UŽDUOTIS:
1. Naudojant Object() metodą sukurti kintamąjį įmonei apibūdinti.
2. Prie objekto pridėti:
2.1. Property „company name" ir priskirti įmonės pavadinimo reikšmę.
2.2. Property „opened" ir priskirti įmonės įkūrimo metų reikšmę.
2.3. Property „companyCode" ir priskirti įmonės kodo reikšmę.
2.4. Property „employees" ir priskirti įmonėje dirbančių darbuotojų kiekio reikšmę.
2.5. Property „ceo" ir priskirti įmonės vadovo reikšmę.
2.6. Property „nvo" ir priskirti boolean reikšmę (ar įmonė turi NVO statusą).
2.7. Property „workingLocations" ir priskirti įmonės veiklos šalių value (turi būti bent 2 veiklos šalys).
2.8. Property „activityAreas" ir priskirti įmonės veiklos sričių reikšmę (turi būti bent dvi veiklos sritys).
2.9. Property „contacts", kuris turės:
      2.9.1. „phone"
      2.9.2. „email"
      2.9.3. „address", kuris turės:
          2.9.3.1. „country"
          2.9.3.2. „city"
          2.9.3.3. „street"
          2.9.3.4. „apartment"


5. Sukurti funkciją, kuri sukuria adreso string'ą: „Vilniaus st. 15, Vilnius, Lithuania.".
6. Sukurti funkcijas, kurios:
       6.1. Pakeičia NVO statusą į true.
       6.2. Pakeičia NVO statusą į false.
       6.3. Keičia NVO statusą iš true į false ir iš false į true.
7. Sukurti funkcijas, kurios grąžina:
       7.1. Šalis, kuriose veikia įmonė į vieną string'ą.
       7.2. Veiklos sritis, kuriose veikia įmonė į vieną string'ą.
8. Sukurti funkcijas, kurios prideda:
       8.1. Naują veiklos šalį prie šalių masyvo.
       8.2. Naują veiklos rūšį prie veiklų masyvo.
9. Sukurti funkcijas, kurios pašalina:
       9.1. Veiklos šalį iš šalių masyvo.
       9.2. Veiklos rūšį iš veiklų masyvo.



1. Susikurkite konstruktorių car, kuris priims brand, model, engine ir turės metodą 'turnOn' - kuris alertins 'vrooom'. Sukurkite du objektus ir patikrinkite ar veikia.
2. Pakoreguokite šį konstruktorių ir pridėkite papildomą property 'basePrice' ir metodą 'getPrice'. basePrice propertį įrašys sukuriant objektą, tačiau getPrice priklausimai nuo variklio išmes kokia yra galutinė kaina. Jei variklis 'electric' - kaina bus +10,000; jei 'diesel' +5,000; jei 'petrol' - kaina tokia kokia ir basePrice.
3. Pridėti funkciją 'getDiscount', kuri, kaip argumentą, priima nuolaidos dydį ir grąžina kainą su nuolaida.
4. Pridėti property 'mileage' ir papildyti automobilių objektus pridedant jų ridą.
5. Pakoreguoti kainų funkcijas:
       5.1. Jeigu rida daugiau nei 0, tai kaina sumažėja 10%.
       5.2. Jeigu rida daugiau nei 20000, tai kaina sumažėja 15%.
       5.3. Jeigu rida daugiau nei 50000, tai kaina sumažėja 20%.
       5.4. Jeigu rida daugiau nei 100000, tai kaina sumažėja 30%.
       5.5. Jeigu rida daugiau nei 400000, tai kaina sumažėja 50%.
6. Pridėti property 'baseColors'. Tai bus masyvas su bazinėmis spalvomis (juoda, raudona, mėlyna, sidabrinė, balta, 'special blue'). Jų pakeisti negalima, nes yra sukuriamos tiesiogiai klasės constructor funkcijoje.
       6.1. Pridėti property 'color', kuria galima papildyti kuriant automobilio objektą pagal klasę. Jeigu kuriant objektą, spalva nėra nurodoma, tai pagal nutylėjimą ji bus juoda.
       6.2. Jeigu nurodyta spalva yra 'special blue', tai automobilio kaina turi padidėti 500.
       6.3. Jeigu nurodytos spalvos nėra tarp bazinių spalvų, tai automobilio kaina turėtų padidėti 3000.
7. Sukurti metodą 'renderElement', kuris sukurią html elementą, jame atvaizduoja automobilio informaciją (modelį, brandą, variklio tipą, kilometražą, spalvą, bazinę kainą) ir šį elementą išveda į ekraną.
       7.1. Pridėti property 'image' (nuotraukos nuoroda), kuris turėtų būti nuotrauka ir šią nuotrauką, taip pat, pridėti į formuluojamą elementą.
8. HTML faile sukurti form'ą. 
8.1. Formoje galima įrašyti automobilio:
       8.1. Brand'ą
       8.2. Modelį
       8.3. Variklio tipą
       8.4. Bazinę kainą
       8.5. Kilometražą
       8.6. Spalvą
       8.7. Nuorodą į automobilio nuotrauką
       8.8. Formos submit metu, informaciją surinkti ir sukurti automobilio objektą, naudojant Car klasę.
       8.9. Panaudoti 'renderElement' metodą ir atvaizduoti automobilio HTML elementą ekrane.
9. 'renderElement' funkcijoje pridėti mygtuką, kurį paspaudus turėtų atvaizduoti pilnos paketą:
       9.1. Bazinė kaina.
       9.2. Papildomų paslaugų kainos.
       9.3. Nuolaida dėl kilometražo.
       9.4. Pritaikyta nuolaida.
       9.5. Galutinė kaina.
       9.6. PVM mokestis. 21%
       9.7. Kaina su PVM mokesčiu.






PIRMA DALIS:
Sukurti kontaktų formą.
1. Kontaktų formoje turi būti šie laukeliai:
    1. Tekstinis laukelis vardui (privalomas).
    2. Tekstinis laukelis pavardei (privalomas).
    3. Skaičiaus laukelis amžiui (privalomas).
    4. Laukelis įvesti telefono numerį (neprivalomas).
    5. Laukelis įvesti el. paštą (privalomas).
    6. Range tipo laukelis, kuris skirtas įvertinti savo IT žinias nuo 1 iki 10. Galimas vertinimas tik sveikiems skaičiams.
    7. Radio tipo laukeliai, kuriuose pasirenkamas grupės numeris. Turi būti galimybė pasirinkti grupes nuo Group 1gr. iki Group 5gr.
    8. Checkbox tipo laukeliai, kuriuose galima pasirinkti dominančias programavimo kalbas (bent 4 skirtingi checkbox elementai). 
    9. Šalia kiekvieno įvesties (input) elemento, pridėti label elementą, kuris žymi laukelio pavadinimą.

ANTRA DALIS:
1. Sukurti div elementą, kuris turės id „students-list".
2. Kiekvieną kartą pridavus formą (submit), turi būti sukurtas naujas div elementas su klase „student-item" ir pridedamas į „students-list" elemento pradžią.
3. Duomenys apie studentą turi būti įdėti į „student-item" elementą.
4. Sukūrus studentą, turi iššokti <span> elementas, kuris informuoja apie studento sukūrimą: „Sukurtas studentas (Vardas Pavardė)". Šis span elementas dingsta po 5 sekundžių.
5. Šalia range tipo laukelio, sukurti span (arba output) elementą ir jame atvaizduoti range laukelio reikšmę jam keičiantis.

TREČIA DALIS:
1. Vietoje el. pašto rodyti tik žvaigždutes „****".
2. Kiekviename „student-item" elemente sukurti mygtuką „Rodyti asmens duomenis".
3. Paspaudus šį mygtuką:
    3.1. Parodyti to studento el. paštą.
    3.2. Pakeist mygtuko tekstą į „Slėpti asmens duomenis".
4. Jeigu asmens duomenys yra rodomi, tai paspaudus mygtuką:
    4.1. Paslėpti asmens el. paštą.
    4.2. Mygtuko tekstą pakeisti į „Rodyti asmens duomenis".

KETVIRTA DALIS (studento ištrynimas):
1. Prie kiekvieno sukurti studento elemento pridėti mygtuką „Ištrinti studentą".
2. Paspaudus šį mygtuką, studento elementas yra ištrinamas.
3. Ištrynus studentą, turi iššokti <span> elementas, kuris informuoja apie studento ištrynimą: „Studentas (Vardas Pavardė) sėkmingai ištrintas.". Šis span elementas dingsta po 5 sekundžių.

PAPILDOMA UŽDUOTIS (formos validacija naudojant JavaScript):
Papildyti formos validaciją. Jeigu:
1. Vardas yra trumpesnis nei 3 simboliai, parašyti: „Vardas privalo būti bent 3 simbolių ilgumo".
2. Pavardė yra trumpesnė nei 3 simboliai, parašyti: „Pavardė privalo būti bent 3 simbolių ilgumo".
3. Amžius yra neigamas, parašyti: „Amžius privalo būti teigiamas skaičius".
4. Amžius yra daugiau nei 120 metų, parašyti: „Įvestas amžius yra per didelis".
5. Telefono numeris yra mažiau nei 9 arba daugiau 11

ŠEŠTA UŽDUOTIS:
1. Sukurti pradinius duomenų masyvą, kuriame būtų bent 5 studentų duomenys (objektų formatu).
2. Sukurti funkciją, kuri priima šiuos duomenis ir užkrovus puslapį į ekraną iškart išveda duomenis iš šio masyvo.

SEPTINTA UŽDUOTIS:
1. Prie kiekvieno studento pridėti mygtuką, kurį paspaudus leistų redaguoti studento duomenis.
2. Redaguojant studentą, submit mygtuko tekstas turėtų pasikeisti į „Save Changes".
3. Pakeitus studento duomenis, turi iššokti <span> elementas, kuris informuoja apie studento duomenų redagavimą: „Studento (Vardas Pavardė) duomenys sėkmingai pakeisti". Šis span elementas dingsta po 5 sekundžių.

1. Sukurti Edit mygtuką.
2. Prie mygtuko pridėti event listener'į.
3. Surinkti studento duomenis ir jais užpildyti formos laukelius.
4. Pakeisti formos submit mygtuko tekstą.
5. Išsaugoti studento HTML elementą kintamąjame.
6. Submit event'o metu patikrinti ar kuriame naują studentą, ar redaguojame jau sukurtą.
7. Jeigu studentas redaguojamas, šį naują (redaguotą) HTML elementą panaudoti perrašant seną studento HTML elementą (kuris išsaugotas 5 žingsnyje).
8. Pakeisti formos submit mygtuko tekstą į pradinį ir pakeisti iššokančio pranešimo tekstą.

AŠTUNTA UŽDUOTIS (local storage):
1. Vedamą tekstą į input elementus išsaugoti į localStorage.
2. Perkrovus puslapį localStorage esančiomis reikšmėmis užpildyti input elementus.
3. Jeigu sukuriamas studentas, tai localStorage esančias reikšmes reikia išvalyti.

DEVINTA UŽDUOTIS (filtravimas):
1. HTML faile sukurti naują form'ą. Joje pridėti šiuos input elementus: text ir submit.
2. Formos submit event'o metu, gauti įvestą tekstą ir:
2.1. Patikrinti ar studentų sąraše yra studentas, kurio varde arba pavardėje yra įvestas tekstas.
2.2. Ekrane atvaizduoti tik tuos studentus, kurie tenkina sąlygą.
3. Prie formos pridėti select elementą ir jame sukurti sąrašą (option elementus), kuriuose būtų nurodytą pagal kurią informaciją studento yra ieškoma (vardas, pavardė, grupė ir t.t., bet išskyrus telefono numerį ir elektroninį paštą).
4. Patobulinti formą, kad studento būtų ieškoma ne tik pagal vardą ir pavardę, tačiau ir pagal pasirinktą atributą.

HTML Select element

DEŠIMTA UŽDUOTIS:
1. Studento kūrimo ir ištrynimo metu reikia sukurti visų studentų masyvą (tokiu pačiu formatu kaip ir initialData).
2. Šį masyvą pridėti į localStorage.
3. Puslapio perkrovimo metu iš localStorage esančio masyvo sukurti studentų sąrašą (pradinių studentų sukūrimo funkcionalumas).

findIndex()










